{"version":3,"sources":["components/Hierarhy.js","App.js","serviceWorker.js","index.js"],"names":["Hierarhy","useEffect","dims","graph","d3","append","attr","stratify","id","d","name","parentId","parent","tree","size","data","selectAll","remove","rootNode","treeData","descendants","nodes","links","enter","transition","duration","x","y","update","buildTree","className","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAsFeA,MARf,WAKE,OAJAC,qBAAU,YA1EM,WAChB,IAAMC,EAAiB,IAAjBA,EAA6B,KAQ7BC,EANMC,IACF,WACPC,OAAO,OACPC,KAAK,QAASJ,EAAa,KAC3BI,KAAK,SAAUJ,EAAc,KAEdG,OAAO,KAAKC,KAAK,YAAa,qBAE1CC,EAAWH,MAEdI,IAAG,SAAAC,GAAC,OAAIA,EAAEC,QACVC,UAAS,SAAAF,GAAC,OAAIA,EAAEG,UAEbC,EAAOT,MAAUU,KAAK,CAACZ,EAAYA,KAY1B,SAAAa,GACbZ,EAAMa,UAAU,SAASC,SACzBd,EAAMa,UAAU,SAASC,SAEzB,IAAMC,EAAWX,EAASQ,GACpBI,EAAWN,EAAKK,GAAUE,cAE1BC,EAAQlB,EAAMa,UAAU,SAASD,KAAKI,GAE/BhB,EAAMa,UAAU,SAASD,KAAKF,EAAKK,GAAUI,SAGvDC,QACAlB,OAAO,QACPmB,aACAC,SAAS,KACTnB,KAAK,QAAS,QACdA,KAAK,OAAQ,QACbA,KAAK,SAAU,QACfA,KAAK,eAAgB,GACrBA,KACC,IACAF,MAEGsB,GAAE,SAAAjB,GAAC,OAAIA,EAAEiB,KACTC,GAAE,SAAAlB,GAAC,OAAIA,EAAEkB,MAGGN,EAChBE,QACAlB,OAAO,KACPC,KAAK,QAAS,QACdA,KAAK,aAAa,SAAAG,GAAC,0BAAiBA,EAAEiB,EAAnB,aAAyBjB,EAAEkB,EAA3B,QAGnBtB,OAAO,UACPC,KAAK,OAAQ,aACbA,KAAK,SAAU,QACfA,KAAK,eAAgB,GACrBA,KAAK,IAAK,IAGfsB,CApDW,CACT,CAAElB,KAAM,eACR,CAAEA,KAAM,SAAUE,OAAQ,eAC1B,CAAEF,KAAM,QAASE,OAAQ,eACzB,CAAEF,KAAM,SAAUE,OAAQ,UAC1B,CAAEF,KAAM,SAAUE,OAAQ,UAC1B,CAAEF,KAAM,WAAYE,OAAQ,SAC5B,CAAEF,KAAM,WAAYE,OAAQ,WAkD5BiB,KACC,IAEI,yBAAKC,UAAU,YCtETC,MARf,WACE,OACE,yBAAKD,UAAU,OACb,kBAAC,EAAD,QCIcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9872c7e9.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport * as d3 from \"d3\";\n\n// import { BinaryTree, RedBlackTree } from \"../services/tree\";\n\nconst buildTree = () => {\n  const dims = { height: 500, width: 1100 };\n\n  const svg = d3\n    .select(\".canvas\")\n    .append(\"svg\")\n    .attr(\"width\", dims.width + 100)\n    .attr(\"height\", dims.height + 100);\n\n  const graph = svg.append(\"g\").attr(\"transform\", \"translate(50, 50)\");\n\n  const stratify = d3\n    .stratify()\n    .id(d => d.name)\n    .parentId(d => d.parent);\n\n  const tree = d3.tree().size([dims.width, dims.height]);\n\n  var data = [\n    { name: \"grandparent\" },\n    { name: \"parent\", parent: \"grandparent\" },\n    { name: \"uncle\", parent: \"grandparent\" },\n    { name: \"child1\", parent: \"parent\" },\n    { name: \"child2\", parent: \"parent\" },\n    { name: \"sibling1\", parent: \"uncle\" },\n    { name: \"sibling2\", parent: \"uncle\" }\n  ];\n\n  const update = data => {\n    graph.selectAll(\".node\").remove();\n    graph.selectAll(\".link\").remove();\n\n    const rootNode = stratify(data);\n    const treeData = tree(rootNode).descendants();\n\n    const nodes = graph.selectAll(\".node\").data(treeData);\n\n    const link = graph.selectAll(\".link\").data(tree(rootNode).links());\n\n    link\n      .enter()\n      .append(\"path\")\n      .transition()\n      .duration(300)\n      .attr(\"class\", \"link\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#aaa\")\n      .attr(\"stroke-width\", 2)\n      .attr(\n        \"d\",\n        d3\n          .linkVertical()\n          .x(d => d.x)\n          .y(d => d.y)\n      );\n\n    const enterNodes = nodes\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"node\")\n      .attr(\"transform\", d => `translate(${d.x}, ${d.y})`);\n\n    enterNodes\n      .append(\"circle\")\n      .attr(\"fill\", \"orangered\")\n      .attr(\"stroke\", \"#555\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"r\", 20);\n  };\n\n  update(data);\n};\n\nfunction Hierarhy() {\n  useEffect(() => {\n    buildTree();\n  }, []);\n\n  return <div className=\"canvas\"></div>;\n}\n\nexport default Hierarhy;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Hierarhy from \"./components/Hierarhy\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Hierarhy />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}