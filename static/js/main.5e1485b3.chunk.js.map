{"version":3,"sources":["config/index.js","algorithms/RedBlackTree.js","algorithms/BinaryTree.js","helpers/initSvg.js","helpers/defineArrowMarkers.js","helpers/initSvgEls.js","helpers/cleanSvgEls.js","animations/AnimatedTree.js","components/Tree.js","App.js","serviceWorker.js","index.js"],"names":["identity","i","RedBlackTree","value","identifier","color","replacement","this","parent","children","undefined","isRightChild","right","left","forEach","child","kid","paintBlack","dir","insert","paint","_insert1","_insert2","isBlack","_insert3","uncle","isRed","grandparent","paintRed","_insert4","isLeftChild","rotateLeft","rotateRight","_insert5","identifiedValue","thisValue","rmPaint","remove","hasTwoChildren","_remove0","standardRemove","isLeaf","isRoot","hasOneChild","rmDir","replica","_minimumChild","childIsRed","_remove1","_remove2","sib","sibling","_remove3","sibIsBlack","sibLeftBlack","sibRightBlack","_remove4","_remove5","_remove6","count","countBlackToRoot","_rotate","_swapWithParent","opposite","oppDir","pivot","BinaryTree","newTree","find","current","_maximumChild","every","initSvg","svg","d3","append","attr","CANVAS_WIDTH","CANVAS_HEIGHT","defs","defineArrowMarkers","appendLine","canvas","initSvgEls","circle","appendCircle","topArrow","leftArrow","rightArrow","valueTxt","text","cleanSvgEls","svgEls","transition","duration","AnimatedRedBlackTree","coordinates","level","center","x","y","linkToParent","x1","y1","x2","y2","linkToLeftChild","linkToRightChild","_","isFinite","parentCenter","currentCenter","levelHeight","levelWidth","Math","pow","leftCenter","rightCenter","updateCoordinates","start","animateToCoordinates","runVisualization","a","animatedTree","AnimatedTree","console","log","Tree","useEffect","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e1485b3.chunk.js","sourcesContent":["export const identity = i => i;\nexport const LEFT = 0;\nexport const RIGHT = 1;\nexport const oppDir = dir => (dir === RIGHT ? LEFT : RIGHT);\nexport const BLACK = \"black\";\nexport const RED = \"red\";\nexport const CANVAS_WIDTH = 800;\nexport const CANVAS_HEIGHT = 400;\nexport const CIRCLE_RADIUS = 20;\nexport const LINK_DELTA = 3;\nexport const TRANSITION_DURATION = 500;\n","import { identity, LEFT, RIGHT, BLACK, RED } from \"../config\";\nimport BinaryTree from \"./BinaryTree\";\n\nexport default class RedBlackTree extends BinaryTree {\n  constructor(value, identifier = identity, color = BLACK) {\n    super(value, identifier);\n    this.color = color;\n  }\n\n  _swapWithParent() {\n    let replacement = new RedBlackTree(this.value, this.identifier, this.color);\n    replacement.parent = this.parent;\n    replacement.children = this.children;\n    if (this.parent !== undefined) {\n      if (this.isRightChild) {\n        this.parent.right = replacement;\n      } else {\n        this.parent.left = replacement;\n      }\n    }\n\n    this.value = replacement.parent.value;\n    this.children = replacement.parent.children;\n    this.parent = replacement.parent.parent;\n    this.color = replacement.parent.color;\n\n    this.children.forEach(child => {\n      if (child) child.parent = this;\n    });\n    this.children.forEach(child => {\n      if (child)\n        child.children.forEach(kid => {\n          if (kid) kid.parent = child;\n        });\n    });\n  }\n\n  paintBlack() {\n    this.color = BLACK;\n  }\n\n  paintRed() {\n    this.color = RED;\n  }\n\n  get isBlack() {\n    return this.color === BLACK;\n  }\n\n  get isRed() {\n    return this.color === RED;\n  }\n\n  insert(value) {\n    if (this.value === undefined) {\n      this.value = value;\n      this.paintBlack();\n      return;\n    }\n    let dir;\n    if (this.identifier(value) > this.identifier(this.value)) {\n      dir = RIGHT;\n    } else {\n      dir = LEFT;\n    }\n    if (this.children[dir] !== undefined) {\n      return this.children[dir].insert(value);\n    } else {\n      let child = new RedBlackTree(value, this.identifier, RED);\n      child.parent = this;\n      this.children[dir] = child;\n      child.paint();\n      return child;\n    }\n  }\n\n  paint() {\n    return this._insert1();\n  }\n\n  _insert1() {\n    if (this.parent === undefined) {\n      this.paintBlack();\n      return;\n    } else {\n      this._insert2();\n    }\n  }\n\n  _insert2() {\n    if (this.parent.isBlack) {\n      return;\n    } else {\n      this._insert3();\n    }\n  }\n\n  _insert3() {\n    let uncle = this.uncle;\n    if (uncle ? uncle.isRed : false) {\n      this.parent.paintBlack();\n      uncle.paintBlack();\n      this.grandparent.paintRed();\n      this.grandparent.paint();\n      return;\n    } else {\n      this._insert4();\n    }\n  }\n\n  _insert4() {\n    if (this.isRightChild && this.parent.isLeftChild) {\n      this.parent.rotateLeft();\n      return;\n    } else if (this.isLeftChild && this.parent.isRightChild) {\n      this.parent.rotateRight();\n      return;\n    }\n    this._insert5();\n  }\n\n  _insert5() {\n    this.parent.paintBlack();\n    this.grandparent.paintRed();\n    if (this.isLeftChild) {\n      this.grandparent.rotateRight();\n    } else {\n      this.grandparent.rotateLeft();\n    }\n    return;\n  }\n\n  remove(value) {\n    let identifiedValue = this.identifier(value);\n    let thisValue = this.identifier(this.value);\n    if (thisValue === identifiedValue) {\n      this.rmPaint(value);\n      return;\n    } else {\n      let dir;\n      if (thisValue < identifiedValue) {\n        dir = RIGHT;\n      } else {\n        dir = LEFT;\n      }\n      if (this.children[dir] === undefined) {\n        return undefined;\n      } else {\n        return this.children[dir].remove(value);\n      }\n    }\n  }\n\n  rmPaint(value) {\n    if (!this.hasTwoChildren) {\n      this._remove0();\n    }\n    this.standardRemove(value);\n  }\n\n  standardRemove(value) {\n    if (this.isLeaf) {\n      if (this.isRoot) {\n        this.value = undefined;\n        this.paintBlack();\n      } else if (this.isRightChild) {\n        this.parent.right = undefined;\n      } else if (this.isLeftChild) {\n        this.parent.left = undefined;\n      }\n    } else if (this.hasOneChild) {\n      let rmDir = this.right ? LEFT : RIGHT;\n      this.right ? this.rotateLeft() : this.rotateRight();\n      this.children[rmDir] = undefined;\n    } else if (this.hasTwoChildren) {\n      let replica = this.right._minimumChild();\n      this.value = replica.value;\n      this.right.remove(replica.value);\n    }\n  }\n\n  _remove0() {\n    let childIsRed = this.hasOneChild\n      ? this.right\n        ? this.right.isRed\n        : this.left.isRed\n      : false;\n    if (this.isBlack) {\n      if (childIsRed) {\n        this.right ? this.right.paintBlack() : this.left.paintBlack();\n      } else {\n        if (this.parent ? this.parent.isBlack : false) {\n          this._remove1();\n        }\n      }\n    }\n  }\n\n  _remove1() {\n    if (this.parent !== undefined) this._remove2();\n  }\n\n  _remove2() {\n    let sib = this.sibling;\n    if (sib && sib.isRed) {\n      this.parent.paintRed();\n      sib.paintBlack();\n      if (this.isLeftChild) {\n        this.parent.rotateLeft();\n      } else if (this.isRightChild) {\n        this.parent.rotateRight();\n      }\n    }\n    this._remove3();\n  }\n\n  _remove3() {\n    let sib = this.sibling;\n    let sibIsBlack = sib ? sib.isBlack : true;\n    let sibLeftBlack = sib ? (sib.left ? sib.left.isBlack : true) : true;\n    let sibRightBlack = sib ? (sib.right ? sib.right.isBlack : true) : true;\n    if (\n      this.parent.isBlack &&\n      sib &&\n      sibIsBlack &&\n      sibLeftBlack &&\n      sibRightBlack\n    ) {\n      sib.paintRed();\n      this.parent._remove1();\n    } else {\n      this._remove4();\n    }\n  }\n\n  _remove4() {\n    let sib = this.sibling;\n    let sibIsBlack = sib ? sib.isBlack : true;\n    let sibLeftBlack = sib ? (sib.left ? sib.left.isBlack : true) : true;\n    let sibRightBlack = sib ? (sib.right ? sib.right.isBlack : true) : true;\n    if (\n      this.parent.isRed &&\n      sib &&\n      sibIsBlack &&\n      sibLeftBlack &&\n      sibRightBlack\n    ) {\n      sib.paintRed();\n      this.parent.paintBlack();\n    } else {\n      this._remove5();\n    }\n  }\n\n  _remove5() {\n    let sib = this.sibling;\n    if (\n      this.isLeftChild &&\n      (sib.right ? sib.right.isBlack : true) &&\n      (sib.left ? sib.left.isRed : false)\n    ) {\n      sib.paintRed();\n      sib.left.paintBlack();\n      sib.rotateRight();\n    } else if (\n      this.isRightChild && (sib.left ? sib.left.isBlack : true) && sib.right\n        ? sib.right.isRed\n        : false\n    ) {\n      sib.paintRed();\n      sib.right.paintBlack();\n      sib.rotateLeft();\n    }\n    this._remove6();\n  }\n\n  _remove6() {\n    let sib = this.sibling;\n    if (sib) this.parent.isBlack ? sib.paintBlack() : sib.paintRed();\n    this.parent.paintBlack();\n    if (this.isLeftChild) {\n      sib.right.paintBlack();\n      this.parent.rotateLeft();\n    } else {\n      sib.left.paintBlack();\n      this.parent.rotateRight();\n    }\n  }\n\n  countBlackToRoot(count = 0) {\n    if (this.parent === undefined) {\n      return count;\n    } else {\n      return this.isBlack\n        ? this.parent.countBlackToRoot(count + 1)\n        : this.parent.countBlackToRoot(count);\n    }\n  }\n}\n","import { identity, LEFT, RIGHT, oppDir } from \"../config\";\n\nexport default class BinaryTree {\n  constructor(value, identifier = identity) {\n    this.value = value;\n    this.children = [];\n    this.identifier = identifier;\n    this.parent = undefined;\n  }\n\n  get left() {\n    return this.children[LEFT];\n  }\n\n  get right() {\n    return this.children[RIGHT];\n  }\n\n  set left(value) {\n    this.children[LEFT] = value;\n  }\n\n  set right(value) {\n    this.children[RIGHT] = value;\n  }\n\n  get isRoot() {\n    return this.parent === undefined;\n  }\n\n  get isLeftChild() {\n    return this.parent ? this.parent.left === this : false;\n  }\n\n  get isRightChild() {\n    return this.parent ? this.parent.right === this : false;\n  }\n\n  get isLeaf() {\n    return this.children.every(child => child === undefined);\n  }\n\n  get grandparent() {\n    return this.parent ? this.parent.parent : undefined;\n  }\n\n  get uncle() {\n    return this.grandparent\n      ? this.parent.isRightChild\n        ? this.grandparent.left\n        : this.grandparent.right\n      : undefined;\n  }\n\n  get sibling() {\n    return this.parent\n      ? this.isRightChild\n        ? this.parent.left\n        : this.parent.right\n      : undefined;\n  }\n\n  get hasOneChild() {\n    return (\n      (this.right !== undefined && this.left === undefined) ||\n      (this.right === undefined && this.left !== undefined)\n    );\n  }\n\n  get hasTwoChildren() {\n    return this.right !== undefined && this.left !== undefined;\n  }\n\n  rotateLeft() {\n    this._rotate(LEFT);\n    this._swapWithParent();\n  }\n\n  rotateRight() {\n    this._rotate(RIGHT);\n    this._swapWithParent();\n  }\n\n  _rotate(dir) {\n    let opposite = oppDir(dir);\n    let pivot = this.children[opposite];\n    this.children[opposite] = pivot.children[dir];\n    pivot.children[dir] = this;\n    pivot.parent = this.parent;\n    pivot.children.forEach(child => {\n      if (child) child.parent = pivot;\n    });\n    this.children.forEach(child => {\n      if (child) child.parent = this;\n    });\n  }\n\n  _swapWithParent() {\n    let replacement = new BinaryTree(this.value, this.identifier);\n    replacement.parent = this.parent;\n    replacement.children = this.children;\n    if (this.parent !== undefined) {\n      if (this.isRightChild) {\n        this.parent.right = replacement;\n      } else {\n        this.parent.left = replacement;\n      }\n    }\n\n    this.value = replacement.parent.value;\n    this.children = replacement.parent.children;\n    this.parent = replacement.parent.parent;\n\n    this.children.forEach(child => {\n      if (child) child.parent = this;\n    });\n    this.children.forEach(child => {\n      if (child)\n        // point children to replacement\n        child.children.forEach(kid => {\n          if (kid) kid.parent = child;\n        });\n    });\n  }\n\n  insert(value) {\n    if (this.value === undefined) {\n      this.value = value;\n      return this;\n    } else {\n      let dir;\n      if (this.identifier(value) > this.identifier(this.value)) {\n        dir = RIGHT;\n      } else {\n        dir = LEFT;\n      }\n      if (this.children[dir] === undefined) {\n        let newTree = new BinaryTree(value, this.identifier);\n        newTree.parent = this;\n        this.children[dir] = newTree;\n        return newTree;\n      } else {\n        return this.children[dir].insert(value);\n      }\n    }\n  }\n\n  // return this.value which is is equal to value through identifier. why?\n  find(value) {\n    let identifiedValue = this.identifier(value);\n    let thisValue = this.identifier(this.value);\n    if (thisValue === identifiedValue) {\n      return this.value;\n    } else {\n      let dir;\n      if (thisValue < identifiedValue) {\n        dir = RIGHT;\n      } else {\n        dir = LEFT;\n      }\n      if (this.children[dir] === undefined) {\n        return undefined;\n      } else {\n        return this.children[dir].find(value);\n      }\n    }\n  }\n\n  contains(value) {\n    return this.find(value) !== undefined;\n  }\n\n  _minimumChild() {\n    let current = this;\n    while (current.left !== undefined) {\n      current = current.left;\n    }\n    return current;\n  }\n\n  minimum() {\n    return this._minimumChild().value;\n  }\n\n  _maximumChild() {\n    let current = this;\n    while (current.right !== undefined) {\n      current = current.right;\n    }\n    return current;\n  }\n\n  maximum() {\n    return this._maximumChild().value;\n  }\n\n  remove(value) {\n    let identifiedValue = this.identifier(value);\n    let thisValue = this.identifier(this.value);\n    if (thisValue === identifiedValue) {\n      if (this.isLeaf) {\n        if (this.isRoot) {\n          this.value = undefined;\n        } else if (this.isRightChild) {\n          this.parent.right = undefined;\n        } else if (this.isLeftChild) {\n          this.parent.left = undefined;\n        }\n      } else if (this.hasOneChild) {\n        let rmDir = this.right ? LEFT : RIGHT;\n        this.right ? this.rotateLeft() : this.rotateRight();\n        this.children[rmDir] = undefined;\n      } else if (this.hasTwoChildren) {\n        let replacement = this.right._minimumChild();\n        this.value = replacement.value;\n        this.right.remove(replacement.value);\n      }\n    } else {\n      let dir;\n      if (thisValue < identifiedValue) {\n        dir = RIGHT;\n      } else {\n        dir = LEFT;\n      }\n      if (this.children[dir] === undefined) {\n        return undefined;\n      } else {\n        return this.children[dir].remove(value);\n      }\n    }\n  }\n}\n","import * as d3 from \"d3\";\nimport { CANVAS_WIDTH, CANVAS_HEIGHT, CIRCLE_RADIUS } from \"../config\";\nimport { defineArrowMarkers } from \"./defineArrowMarkers\";\n\nexport const initSvg = () => {\n  const svg = d3\n    .select(\"body\")\n    .append(\"svg\")\n    .attr(\"width\", CANVAS_WIDTH + CIRCLE_RADIUS * 2)\n    .attr(\"height\", CANVAS_HEIGHT + CIRCLE_RADIUS * 2);\n\n  defineArrowMarkers(svg);\n\n  const canvas = svg\n    .append(\"g\")\n    .attr(\"transform\", `translate(${CIRCLE_RADIUS}, ${CIRCLE_RADIUS})`);\n\n  return canvas;\n};\n","export const defineArrowMarkers = svg => {\n  const defs = svg.append(\"defs\");\n\n  defs\n    .append(\"marker\")\n    .attr(\"id\", \"blackTriangle\")\n    .attr(\"refX\", 6)\n    .attr(\"refY\", 6)\n    .attr(\"markerWidth\", 30)\n    .attr(\"markerHeight\", 30)\n    .attr(\"markerUnits\", \"userSpaceOnUse\")\n    .attr(\"orient\", \"auto\")\n    .append(\"path\")\n    .attr(\"d\", \"M 0 0 12 6 0 12 3 6\")\n    .attr(\"fill\", \"black\");\n\n  defs\n    .append(\"marker\")\n    .attr(\"id\", \"blueTriangle\")\n    .attr(\"refX\", 6)\n    .attr(\"refY\", 6)\n    .attr(\"markerWidth\", 30)\n    .attr(\"markerHeight\", 30)\n    .attr(\"markerUnits\", \"userSpaceOnUse\")\n    .attr(\"orient\", \"auto\")\n    .append(\"path\")\n    .attr(\"d\", \"M 0 0 12 6 0 12 3 6\")\n    .attr(\"fill\", \"blue\");\n};\n","import { CIRCLE_RADIUS } from \"../config\";\r\n\r\nconst appendCircle = canvas => {\r\n  return canvas\r\n    .append(\"circle\")\r\n    .attr(\"cx\", 0)\r\n    .attr(\"cy\", 0)\r\n    .attr(\"r\", CIRCLE_RADIUS)\r\n    .attr(\"opacity\", 0);\r\n};\r\n\r\nconst appendLine = canvas => {\r\n  return canvas\r\n    .append(\"line\")\r\n    .attr(\"x1\", 0)\r\n    .attr(\"y1\", 0)\r\n    .attr(\"x2\", 0)\r\n    .attr(\"y2\", 0)\r\n    .attr(\"stroke-width\", 1)\r\n    .attr(\"opacity\", 0);\r\n};\r\n\r\nexport const initSvgEls = (canvas, value, color ) => {\r\n  const circle = appendCircle(canvas)\r\n    .attr(\"fill\", color)\r\n    .attr(\"opacity\", 1);\r\n\r\n  const topArrow = appendLine(canvas)\r\n    .attr(\"stroke\", \"blue\")\r\n    .attr(\"marker-end\", \"url(#blueTriangle)\")\r\n    .attr(\"opacity\", 1);\r\n\r\n  const leftArrow = appendLine(canvas)\r\n    .attr(\"stroke\", \"black\")\r\n    .attr(\"marker-end\", \"url(#blackTriangle)\")\r\n    .attr(\"opacity\", 1);\r\n\r\n  const rightArrow = appendLine(canvas)\r\n    .attr(\"stroke\", \"black\")\r\n    .attr(\"marker-end\", \"url(#blackTriangle)\")\r\n    .attr(\"opacity\", 1);\r\n\r\n  const valueTxt = canvas\r\n    .append(\"text\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"fill\", \"white\")\r\n    .attr('x', 0)\r\n    .attr('y', 5)\r\n    .text(value);\r\n\r\n  return {\r\n    circle,\r\n    valueTxt,\r\n    topArrow,\r\n    leftArrow,\r\n    rightArrow\r\n  };\r\n};\r\n","import { TRANSITION_DURATION } from \"../config\";\r\n\r\nexport const cleanSvgEls = svgEls => {\r\n  const { circle, valueTxt, topArrow, leftArrow, rightArrow } = svgEls;\r\n\r\n  circle\r\n    .transition()\r\n    .duration(TRANSITION_DURATION)\r\n    .remove();\r\n\r\n  valueTxt\r\n    .transition()\r\n    .duration(TRANSITION_DURATION)\r\n    .remove();\r\n\r\n  topArrow\r\n    .transition()\r\n    .duration(TRANSITION_DURATION)\r\n    .remove();\r\n\r\n  leftArrow\r\n    .transition()\r\n    .duration(TRANSITION_DURATION)\r\n    .remove();\r\n\r\n  rightArrow\r\n    .transition()\r\n    .duration(TRANSITION_DURATION)\r\n    .remove();\r\n};\r\n","import _ from \"underscore\";\nimport {\n  identity,\n  LEFT,\n  RIGHT,\n  oppDir,\n  BLACK,\n  RED,\n  CIRCLE_RADIUS,\n  LINK_DELTA,\n  CANVAS_WIDTH,\n  CANVAS_HEIGHT\n} from \"../config\";\nimport RedBlackTree from \"../algorithms/RedBlackTree\";\nimport { initSvgEls, cleanSvgEls } from \"../helpers\";\n\nexport default class AnimatedRedBlackTree extends RedBlackTree {\n  constructor(canvas, value, identifier, color) {\n    super(value, identifier, color);\n    this.canvas = canvas;\n\n    this.coordinates = {\n      level: 0,\n      center: { x: 0, y: 0 },\n      linkToParent: { x1: 0, y1: 0, x2: 0, y2: 0 },\n      linkToLeftChild: { x1: 0, y1: 0, x2: 0, y2: 0 },\n      linkToRightChild: { x1: 0, y1: 0, x2: 0, y2: 0 }\n    };\n\n    if (_.isFinite(value)) {\n      this.svgEls = initSvgEls(canvas, value, this.color);\n    }\n  }\n\n  updateCoordinates(parentCenter, currentCenter, level = 0) {\n    const levelHeight = CANVAS_HEIGHT / 5;\n    const levelWidth = CANVAS_WIDTH / Math.pow(2, level + 1);\n\n    if (parentCenter && currentCenter) {\n      this.svgEls.topArrow.attr(\"opacity\", 1);\n\n      const center = currentCenter;\n      const leftCenter = {\n        x: center.x - levelWidth / 2,\n        y: center.y + levelHeight\n      };\n      const rightCenter = {\n        x: center.x + levelWidth / 2,\n        y: center.y + levelHeight\n      };\n\n      const linkToParent = {\n        x1: center.x + LINK_DELTA,\n        y1: center.y - CIRCLE_RADIUS,\n        x2: parentCenter.x + LINK_DELTA,\n        y2: parentCenter.y + CIRCLE_RADIUS\n      };\n      const linkToLeftChild = {\n        x1: center.x - LINK_DELTA,\n        y1: center.y + CIRCLE_RADIUS,\n        x2: leftCenter.x - LINK_DELTA,\n        y2: leftCenter.y - CIRCLE_RADIUS\n      };\n      const linkToRightChild = {\n        x1: center.x - LINK_DELTA,\n        y1: center.y + CIRCLE_RADIUS,\n        x2: rightCenter.x - LINK_DELTA,\n        y2: rightCenter.y - CIRCLE_RADIUS\n      };\n\n      this.coordinates = {\n        level,\n        center,\n        linkToParent,\n        linkToLeftChild,\n        linkToRightChild\n      };\n\n      if (this.children[LEFT] !== undefined) {\n        this.children[LEFT].updateCoordinates(center, leftCenter, level + 1);\n      }\n\n      if (this.children[RIGHT] !== undefined) {\n        this.children[RIGHT].updateCoordinates(center, rightCenter, level + 1);\n      }\n    } else if (this.parent) {\n      this.parent.updateCoordinates();\n    } else {\n      this.svgEls.topArrow.attr(\"opacity\", 0);\n\n      const center = { x: levelWidth, y: levelHeight * level };\n      const leftCenter = {\n        x: center.x - levelWidth / 2,\n        y: center.y + levelHeight\n      };\n      const rightCenter = {\n        x: center.x + levelWidth / 2,\n        y: center.y + levelHeight\n      };\n\n      const linkToParent = {\n        x1: center.x,\n        y1: center.y,\n        x2: center.x,\n        y2: center.y\n      };\n      const linkToLeftChild = {\n        x1: center.x - LINK_DELTA,\n        y1: center.y + CIRCLE_RADIUS,\n        x2: leftCenter.x -LINK_DELTA,\n        y2: leftCenter.y - CIRCLE_RADIUS\n      };\n      const linkToRightChild = {\n        x1: center.x - LINK_DELTA,\n        y1: center.y + CIRCLE_RADIUS,\n        x2: rightCenter.x -LINK_DELTA,\n        y2: rightCenter.y - CIRCLE_RADIUS\n      };\n\n      this.coordinates = {\n        level,\n        center,\n        linkToParent,\n        linkToLeftChild,\n        linkToRightChild\n      };\n\n      if (this.children[LEFT] !== undefined) {\n        this.children[LEFT].updateCoordinates(center, leftCenter, level + 1);\n      }\n\n      if (this.children[RIGHT] !== undefined) {\n        this.children[RIGHT].updateCoordinates(center, rightCenter, level + 1);\n      }\n    }\n  }\n\n  async animateToCoordinates(start) {\n    if (start) {\n      // run transitions of all svgEls to new coordinates\n      // await Promise.all[collection of promises from childs]\n    } else if (this.parent) {\n      this.parent.animateToCoordinates();\n    } else {\n      // it is root node\n      // call elements animation to coordinates with start true for all childs\n      // await Promise.all[collection of promises from childs]\n    }\n  }\n\n  async _swapWithParent() {\n    let replacement = new AnimatedRedBlackTree(\n      this.canvas,\n      this.value,\n      this.identifier,\n      this.color\n    );\n    replacement.parent = this.parent;\n    replacement.children = this.children;\n    cleanSvgEls(replacement.svgEls);\n    replacement.svgEls = this.svgEls;\n\n    if (this.parent !== undefined) {\n      if (this.isRightChild) {\n        this.parent.right = replacement;\n      } else {\n        this.parent.left = replacement;\n      }\n    }\n\n    this.value = replacement.parent.value;\n    this.children = replacement.parent.children;\n    this.parent = replacement.parent.parent;\n    this.color = replacement.parent.color;\n    this.svgEls = replacement.parent.svgEls;\n\n    this.children.forEach(child => {\n      if (child) child.parent = this;\n    });\n    this.children.forEach(child => {\n      if (child)\n        child.children.forEach(kid => {\n          if (kid) kid.parent = child;\n        });\n    });\n  }\n\n  async insert(value) {\n    if (this.value === undefined) {\n      this.value = value;\n      this.paintBlack();\n      this.svgEls = initSvgEls(this.canvas, value, this.color);\n      return;\n    }\n    let dir;\n    if (this.identifier(value) > this.identifier(this.value)) {\n      dir = RIGHT;\n    } else {\n      dir = LEFT;\n    }\n    if (this.children[dir] !== undefined) {\n      return this.children[dir].insert(value);\n    } else {\n      let child = new AnimatedRedBlackTree(\n        this.canvas,\n        value,\n        this.identifier,\n        RED\n      );\n      child.parent = this;\n      this.children[dir] = child;\n      child.paint();\n      return child;\n    }\n  }\n}\n","import { useEffect } from \"react\";\nimport AnimatedTree from \"../animations/AnimatedTree\";\nimport { canvasTest, initSvg } from \"../helpers\";\n\nconst runVisualization = async () => {\n  const canvas = initSvg();\n  // canvasTest(canvas);\n\n  const animatedTree = new AnimatedTree(canvas);\n\n  for (let i = 0; i <= 10; i++) {\n    await animatedTree.insert(i);\n  }\n\n  animatedTree.updateCoordinates()\n  console.log(animatedTree)\n\n  // for (let i = 50; i >= 20; i--) {\n  //   await animatedTree.remove(i);\n  // }\n\n};\n\nfunction Tree() {\n  useEffect(() => {\n    runVisualization();\n  }, []);\n\n  return null;\n}\n\nexport default Tree;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Tree from \"./components/Tree\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tree />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}