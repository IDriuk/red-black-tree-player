{"version":3,"sources":["components/Description.js","components/Hierarhy.js","algorithms/RedBlackTree.js","components/Tree/AnimatedTree.js","components/Tree/index.js","App.js","serviceWorker.js","index.js"],"names":["Description","className","Hierarhy","useEffect","dims","graph","d3","append","attr","stratify","id","d","name","parentId","parent","tree","size","data","selectAll","remove","rootNode","treeData","descendants","nodes","links","enter","transition","duration","x","y","update","buildTree","identity","i","AnimatedRedBlackTree","value","identifier","color","replacement","RedBlackTree","this","children","undefined","isRightChild","right","left","forEach","child","kid","paintBlack","dir","insert","paint","_insert1","_insert2","isBlack","_insert3","uncle","isRed","grandparent","paintRed","_insert4","isLeftChild","rotateLeft","rotateRight","_insert5","identifiedValue","thisValue","rmPaint","hasTwoChildren","_remove0","standardRemove","isLeaf","isRoot","hasOneChild","rmDir","replica","_minimumChild","childIsRed","_remove1","_remove2","sib","sibling","_remove3","sibIsBlack","sibLeftBlack","sibRightBlack","_remove4","_remove5","_remove6","count","countBlackToRoot","_rotate","_swapWithParent","opposite","oppDir","pivot","BinaryTree","newTree","find","current","_maximumChild","every","Tree","console","log","AnimatedTree","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9dccbc64.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Description() {\n  return (\n    <header className=\"App-header\">\n      <h1>Red Black Tree Player</h1>\n      <p>Put array of numbers. Build tree from numbers, remove nodes randomly. Animate work of algorithm, moving and recoloring nodes, creating and updating links</p>\n    </header>\n  );\n}\n\nexport default Description;\n","import React, { useEffect } from \"react\";\nimport * as d3 from \"d3\";\n\nconst buildTree = () => {\n  const dims = { height: 500, width: 1100 };\n\n  const svg = d3\n    .select(\".canvas\")\n    .append(\"svg\")\n    .attr(\"width\", dims.width + 100)\n    .attr(\"height\", dims.height + 100);\n\n  const graph = svg.append(\"g\").attr(\"transform\", \"translate(50, 50)\");\n\n  const stratify = d3\n    .stratify()\n    .id(d => d.name)\n    .parentId(d => d.parent);\n\n  const tree = d3.tree().size([dims.width, dims.height]);\n\n  var data = [\n    { name: \"grandparent\" },\n    { name: \"parent\", parent: \"grandparent\" },\n    { name: \"uncle\", parent: \"grandparent\" },\n    { name: \"child1\", parent: \"parent\" },\n    { name: \"child2\", parent: \"parent\" },\n    { name: \"sibling1\", parent: \"uncle\" },\n    { name: \"sibling2\", parent: \"uncle\" }\n  ];\n\n  const update = data => {\n    graph.selectAll(\".node\").remove();\n    graph.selectAll(\".link\").remove();\n\n    const rootNode = stratify(data);\n    const treeData = tree(rootNode).descendants();\n\n    const nodes = graph.selectAll(\".node\").data(treeData);\n\n    const link = graph.selectAll(\".link\").data(tree(rootNode).links());\n\n    link\n      .enter()\n      .append(\"path\")\n      .transition()\n      .duration(300)\n      .attr(\"class\", \"link\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#aaa\")\n      .attr(\"stroke-width\", 2)\n      .attr(\n        \"d\",\n        d3\n          .linkVertical()\n          .x(d => d.x)\n          .y(d => d.y)\n      );\n\n    const enterNodes = nodes\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"node\")\n      .attr(\"transform\", d => `translate(${d.x}, ${d.y})`);\n\n    enterNodes\n      .append(\"circle\")\n      .attr(\"fill\", \"orangered\")\n      .attr(\"stroke\", \"#555\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"r\", 20);\n  };\n\n  update(data);\n};\n\nfunction Hierarhy() {\n  useEffect(() => {\n    buildTree();\n  }, []);\n\n  return <div className=\"canvas\"></div>;\n}\n\nexport default Hierarhy;\n","const identity = i => i;\nconst LEFT = 0;\nconst RIGHT = 1;\nconst oppDir = dir => (dir === RIGHT ? LEFT : RIGHT);\n\nclass BinaryTree {\n  constructor(value, identifier = identity) {\n    this.value = value;\n    this.children = [];\n    this.identifier = identifier;\n    this.parent = undefined;\n  }\n\n  get left() {\n    return this.children[LEFT];\n  }\n\n  get right() {\n    return this.children[RIGHT];\n  }\n\n  set left(value) {\n    this.children[LEFT] = value;\n  }\n\n  set right(value) {\n    this.children[RIGHT] = value;\n  }\n\n  get isRoot() {\n    return this.parent === undefined;\n  }\n\n  get isLeftChild() {\n    return this.parent ? this.parent.left === this : false;\n  }\n\n  get isRightChild() {\n    return this.parent ? this.parent.right === this : false;\n  }\n\n  get isLeaf() {\n    return this.children.every(child => child === undefined);\n  }\n\n  get grandparent() {\n    return this.parent ? this.parent.parent : undefined;\n  }\n\n  get uncle() {\n    return this.grandparent\n      ? this.parent.isRightChild\n        ? this.grandparent.left\n        : this.grandparent.right\n      : undefined;\n  }\n\n  get sibling() {\n    return this.parent\n      ? this.isRightChild\n        ? this.parent.left\n        : this.parent.right\n      : undefined;\n  }\n\n  get hasOneChild() {\n    return (\n      (this.right !== undefined && this.left === undefined) ||\n      (this.right === undefined && this.left !== undefined)\n    );\n  }\n\n  get hasTwoChildren() {\n    return this.right !== undefined && this.left !== undefined;\n  }\n\n  rotateLeft() {\n    this._rotate(LEFT);\n    this._swapWithParent();\n  }\n\n  rotateRight() {\n    this._rotate(RIGHT);\n    this._swapWithParent();\n  }\n\n  _rotate(dir) {\n    let opposite = oppDir(dir);\n    let pivot = this.children[opposite];\n    this.children[opposite] = pivot.children[dir];\n    pivot.children[dir] = this;\n    pivot.parent = this.parent;\n    pivot.children.forEach(child => {\n      if (child) child.parent = pivot;\n    });\n    this.children.forEach(child => {\n      if (child) child.parent = this;\n    });\n  }\n\n  _swapWithParent() {\n    let replacement = new BinaryTree(this.value, this.identifier);\n    replacement.parent = this.parent;\n    replacement.children = this.children;\n    if (this.parent !== undefined) {\n      if (this.isRightChild) {\n        this.parent.right = replacement;\n      } else {\n        this.parent.left = replacement;\n      }\n    }\n\n    this.value = replacement.parent.value;\n    this.children = replacement.parent.children;\n    this.parent = replacement.parent.parent;\n\n    this.children.forEach(child => {\n      if (child) child.parent = this;\n    });\n    this.children.forEach(child => {\n      if (child)\n        // point children to replacement\n        child.children.forEach(kid => {\n          if (kid) kid.parent = child;\n        });\n    });\n  }\n\n  insert(value) {\n    if (this.value === undefined) {\n      this.value = value;\n      return this;\n    } else {\n      let dir;\n      if (this.identifier(value) > this.identifier(this.value)) {\n        dir = RIGHT;\n      } else {\n        dir = LEFT;\n      }\n      if (this.children[dir] === undefined) {\n        let newTree = new BinaryTree(value, this.identifier);\n        newTree.parent = this;\n        this.children[dir] = newTree;\n        return newTree;\n      } else {\n        return this.children[dir].insert(value);\n      }\n    }\n  }\n\n  // return this.value which is is equal to value through identifier. why?\n  find(value) {\n    let identifiedValue = this.identifier(value);\n    let thisValue = this.identifier(this.value);\n    if (thisValue === identifiedValue) {\n      return this.value;\n    } else {\n      let dir;\n      if (thisValue < identifiedValue) {\n        dir = RIGHT;\n      } else {\n        dir = LEFT;\n      }\n      if (this.children[dir] === undefined) {\n        return undefined;\n      } else {\n        return this.children[dir].find(value);\n      }\n    }\n  }\n\n  contains(value) {\n    return this.find(value) !== undefined;\n  }\n\n  _minimumChild() {\n    let current = this;\n    while (current.left !== undefined) {\n      current = current.left;\n    }\n    return current;\n  }\n\n  minimum() {\n    return this._minimumChild().value;\n  }\n\n  _maximumChild() {\n    let current = this;\n    while (current.right !== undefined) {\n      current = current.right;\n    }\n    return current;\n  }\n\n  maximum() {\n    return this._maximumChild().value;\n  }\n\n  remove(value) {\n    let identifiedValue = this.identifier(value);\n    let thisValue = this.identifier(this.value);\n    if (thisValue === identifiedValue) {\n      if (this.isLeaf) {\n        if (this.isRoot) {\n          this.value = undefined;\n        } else if (this.isRightChild) {\n          this.parent.right = undefined;\n        } else if (this.isLeftChild) {\n          this.parent.left = undefined;\n        }\n      } else if (this.hasOneChild) {\n        let rmDir = this.right ? LEFT : RIGHT;\n        this.right ? this.rotateLeft() : this.rotateRight();\n        this.children[rmDir] = undefined;\n      } else if (this.hasTwoChildren) {\n        let replacement = this.right._minimumChild();\n        this.value = replacement.value;\n        this.right.remove(replacement.value);\n      }\n    } else {\n      let dir;\n      if (thisValue < identifiedValue) {\n        dir = RIGHT;\n      } else {\n        dir = LEFT;\n      }\n      if (this.children[dir] === undefined) {\n        return undefined;\n      } else {\n        return this.children[dir].remove(value);\n      }\n    }\n  }\n}\n\nconst BLACK = \"b\";\nconst RED = \"r\";\n\nexport default class RedBlackTree extends BinaryTree {\n  constructor(value, identifier = identity, color = BLACK) {\n    super(value, identifier);\n    this.color = color;\n  }\n\n  _swapWithParent() {\n    let replacement = new RedBlackTree(this.value, this.identifier, this.color);\n    replacement.parent = this.parent;\n    replacement.children = this.children;\n    if (this.parent !== undefined) {\n      if (this.isRightChild) {\n        this.parent.right = replacement;\n      } else {\n        this.parent.left = replacement;\n      }\n    }\n\n    this.value = replacement.parent.value;\n    this.children = replacement.parent.children;\n    this.parent = replacement.parent.parent;\n    this.color = replacement.parent.color;\n\n    this.children.forEach(child => {\n      if (child) child.parent = this;\n    });\n    this.children.forEach(child => {\n      if (child)\n        child.children.forEach(kid => {\n          if (kid) kid.parent = child;\n        });\n    });\n  }\n\n  paintBlack() {\n    this.color = BLACK;\n  }\n\n  paintRed() {\n    this.color = RED;\n  }\n\n  get isBlack() {\n    return this.color === BLACK;\n  }\n\n  get isRed() {\n    return this.color === RED;\n  }\n\n  insert(value) {\n    if (this.value === undefined) {\n      this.value = value;\n      this.paintBlack();\n      return;\n    }\n    let dir;\n    if (this.identifier(value) > this.identifier(this.value)) {\n      dir = RIGHT;\n    } else {\n      dir = LEFT;\n    }\n    if (this.children[dir] !== undefined) {\n      return this.children[dir].insert(value);\n    } else {\n      let child = new RedBlackTree(value, this.identifier, RED);\n      child.parent = this;\n      this.children[dir] = child;\n      child.paint();\n      return child;\n    }\n  }\n\n  paint() {\n    return this._insert1();\n  }\n\n  _insert1() {\n    if (this.parent === undefined) {\n      this.paintBlack();\n      return;\n    } else {\n      this._insert2();\n    }\n  }\n\n  _insert2() {\n    if (this.parent.isBlack) {\n      return;\n    } else {\n      this._insert3();\n    }\n  }\n\n  _insert3() {\n    let uncle = this.uncle;\n    if (uncle ? uncle.isRed : false) {\n      this.parent.paintBlack();\n      uncle.paintBlack();\n      this.grandparent.paintRed();\n      this.grandparent.paint();\n      return;\n    } else {\n      this._insert4();\n    }\n  }\n\n  _insert4() {\n    if (this.isRightChild && this.parent.isLeftChild) {\n      this.parent.rotateLeft();\n      return;\n    } else if (this.isLeftChild && this.parent.isRightChild) {\n      this.parent.rotateRight();\n      return;\n    }\n    this._insert5();\n  }\n\n  _insert5() {\n    this.parent.paintBlack();\n    this.grandparent.paintRed();\n    if (this.isLeftChild) {\n      this.grandparent.rotateRight();\n    } else {\n      this.grandparent.rotateLeft();\n    }\n    return;\n  }\n\n  remove(value) {\n    let identifiedValue = this.identifier(value);\n    let thisValue = this.identifier(this.value);\n    if (thisValue === identifiedValue) {\n      this.rmPaint(value);\n      return;\n    } else {\n      let dir;\n      if (thisValue < identifiedValue) {\n        dir = RIGHT;\n      } else {\n        dir = LEFT;\n      }\n      if (this.children[dir] === undefined) {\n        return undefined;\n      } else {\n        return this.children[dir].remove(value);\n      }\n    }\n  }\n\n  rmPaint(value) {\n    if (!this.hasTwoChildren) {\n      this._remove0();\n    }\n    this.standardRemove(value);\n  }\n\n  standardRemove(value) {\n    if (this.isLeaf) {\n      if (this.isRoot) {\n        this.value = undefined;\n        this.paintBlack();\n      } else if (this.isRightChild) {\n        this.parent.right = undefined;\n      } else if (this.isLeftChild) {\n        this.parent.left = undefined;\n      }\n    } else if (this.hasOneChild) {\n      let rmDir = this.right ? LEFT : RIGHT;\n      this.right ? this.rotateLeft() : this.rotateRight();\n      this.children[rmDir] = undefined;\n    } else if (this.hasTwoChildren) {\n      let replica = this.right._minimumChild();\n      this.value = replica.value;\n      this.right.remove(replica.value);\n    }\n  }\n\n  _remove0() {\n    let childIsRed = this.hasOneChild\n      ? this.right\n        ? this.right.isRed\n        : this.left.isRed\n      : false;\n    if (this.isBlack) {\n      if (childIsRed) {\n        this.right ? this.right.paintBlack() : this.left.paintBlack();\n      } else {\n        if (this.parent ? this.parent.isBlack : false) {\n          this._remove1();\n        }\n      }\n    }\n  }\n\n  _remove1() {\n    if (this.parent !== undefined) this._remove2();\n  }\n\n  _remove2() {\n    let sib = this.sibling;\n    if (sib && sib.isRed) {\n      this.parent.paintRed();\n      sib.paintBlack();\n      if (this.isLeftChild) {\n        this.parent.rotateLeft();\n      } else if (this.isRightChild) {\n        this.parent.rotateRight();\n      }\n    }\n    this._remove3();\n  }\n\n  _remove3() {\n    let sib = this.sibling;\n    let sibIsBlack = sib ? sib.isBlack : true;\n    let sibLeftBlack = sib ? (sib.left ? sib.left.isBlack : true) : true;\n    let sibRightBlack = sib ? (sib.right ? sib.right.isBlack : true) : true;\n    if (\n      this.parent.isBlack &&\n      sib &&\n      sibIsBlack &&\n      sibLeftBlack &&\n      sibRightBlack\n    ) {\n      sib.paintRed();\n      this.parent._remove1();\n    } else {\n      this._remove4();\n    }\n  }\n\n  _remove4() {\n    let sib = this.sibling;\n    let sibIsBlack = sib ? sib.isBlack : true;\n    let sibLeftBlack = sib ? (sib.left ? sib.left.isBlack : true) : true;\n    let sibRightBlack = sib ? (sib.right ? sib.right.isBlack : true) : true;\n    if (\n      this.parent.isRed &&\n      sib &&\n      sibIsBlack &&\n      sibLeftBlack &&\n      sibRightBlack\n    ) {\n      sib.paintRed();\n      this.parent.paintBlack();\n    } else {\n      this._remove5();\n    }\n  }\n\n  _remove5() {\n    let sib = this.sibling;\n    if (\n      this.isLeftChild &&\n      (sib.right ? sib.right.isBlack : true) &&\n      (sib.left ? sib.left.isRed : false)\n    ) {\n      sib.paintRed();\n      sib.left.paintBlack();\n      sib.rotateRight();\n    } else if (\n      this.isRightChild && (sib.left ? sib.left.isBlack : true) && sib.right\n        ? sib.right.isRed\n        : false\n    ) {\n      sib.paintRed();\n      sib.right.paintBlack();\n      sib.rotateLeft();\n    }\n    this._remove6();\n  }\n\n  _remove6() {\n    let sib = this.sibling;\n    if (sib) this.parent.isBlack ? sib.paintBlack() : sib.paintRed();\n    this.parent.paintBlack();\n    if (this.isLeftChild) {\n      sib.right.paintBlack();\n      this.parent.rotateLeft();\n    } else {\n      sib.left.paintBlack();\n      this.parent.rotateRight();\n    }\n  }\n\n  countBlackToRoot(count = 0) {\n    if (this.parent === undefined) {\n      return count;\n    } else {\n      return this.isBlack\n        ? this.parent.countBlackToRoot(count + 1)\n        : this.parent.countBlackToRoot(count);\n    }\n  }\n}\n","import RedBlackTree from '../../algorithms/RedBlackTree'\n\nexport default class AnimatedRedBlackTree extends RedBlackTree {\n  // constructor(value) {\n  //   super(value);\n  // }\n}\n","import React from \"react\";\n\nimport AnimatedTree from \"./AnimatedTree\";\n\nfunction Tree() {\n  console.log( AnimatedTree );\n  return <div></div>;\n}\n\nexport default Tree;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Description from './components/Description'\nimport Hierarhy from \"./components/Hierarhy\";\nimport Tree from './components/Tree'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Description />\n      <Hierarhy />\n      <Tree />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}